Houve algumas interferências na aula anterior, agora, se formos observar
podemos perceber que possui um erro nas listas, por exemplo no created_by, entre
outros reotrnos de lista.
Para fazer o created_by podemos herdar do PostListView já que é bem semelhante.

Por termos uma queryset no PostListView não precisamos de model e nem de ordering,
que está todos sendo informados na queryset.

Se quiser ver mais a fundo sobre essas classes, só passar o mouse por cima e clicar
em "ctrl + mouse left" com isso, é possível ir explorando o interior de tudo, a raiz.
E assim ver quais métodos são chamados primeiro.

Agora o created_by após colocarmos ele na url, está sendo comportado como a home.
Uma maneira de ver qual método será chamado primeiro é fazendo isto;

    def setup(self, *args, **kwargs):
        print('Este é o método setup')
        super_setup = super().setup(*args, **kwargs)
        return super_setup
    def dispatch(self, *args, **kwargs):
        print('Este é o método dispatch')
        super_dispatch = super().dispatch(*args, **kwargs)
        return super_dispatch

E os métodos que comparamos ficou assim;

Este é o método setup
Este é o método dispatch
Este é o método get
Este é o método get_queryset
Este é o método get_context_data

Sendo esta a ordem, caso não mexa em nada.
Primeira coisa que vamos puxar é o user.

Lembra, não vamos usar nem setup que é a inicialização da configuração,
nem dispatch que apenas despacha para qual método será chamado.
Agora já que o dispatch sabe que é um get logo podemos mexer no método get para pegar
o user. E o próprio get já pode retornar um http response.
Podemos usar;

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
    
        print('ARGUMENTOS', self.kwargs)

Para saber quais ARGUMENTOS estão vindo da kwargs. Os argumentos serão "author_pk:..."
você teria acesso das coisas que está sendo enviado. O author_pk veio da url.
Logo, podemos fazer isto;

        author_pk = self.kwargs.get('author_pk')


Agora, se quisermos definir um http response diferente de 404 quando não possui página
temos que usar o método get, mas primeiramente, vamos adicionar coisas em um context
temporário "_temp_context"

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._temp_context: dict[str, Any] = {}

    def get(self, request, *args, **kwargs):
        author_pk = self.kwargs.get('author_pk')
        user = User.objects.filter(pk=author_pk).first()

        if user is None:
            return redirect('blog:index')

        return super().get(request, *args, **kwargs)

E agora, ele irá redirecionar a página pro index caso o usuário não existir.

Logo, caso for retornar uma exceção não precisa disto.

Mas agora podemos fazer isto;

    def get(self, request, *args, **kwargs):
        author_pk = self.kwargs.get('author_pk')
        user = User.objects.filter(pk=author_pk).first()

        if user is None:
            raise Http404()

        self._temp_context.update({
            'author_pk': author_pk,
            'user': user,
        })
        return super().get(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        ctx = super().get_context_data(**kwargs)
        user = self._temp_context['user']
        user_full_name = user.username

        if user.first_name:
            user_full_name = f'{user.first_name} {user.last_name}'

        page_title = user_full_name + ' posts - '

        ctx.update({
            'page_title': page_title
        })

        return ctx
Lembre que isso está funcionando pois o método get é chamado primeiro que o get_context_data.
Agora temos que manipular a queryset.

    def get_queryset(self):
        qs = super().get_queryset()
        qs = qs.filter(created_by__pk=self._temp_context['user'].pk)
        return qs

Isso é pelo motivo que ele filtra por created_by como vimos, porém, podemos fazer dessa
outra forma;

    def get_queryset(self):
        qs = super().get_queryset()
        qs = qs.filter(created_by__pk=self.kwargs.get('author_pk'))
        return qs
