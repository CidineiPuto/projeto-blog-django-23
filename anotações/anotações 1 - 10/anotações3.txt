Vamos configurar uma variável de sistema, o dotenv.
Vamos criar uma pasta chamada dotenv_files,
lá iremos criar a .env-example, e a .env

O .env-example é como a pessoa subiria o processo para o computador dela.
Vamos copiar este arquivo .env-example, copiar ele e colar no dotenv_files.

No .env podemos colocar as coisas importantes.
Para a secretket, vamos usar;

python -c "import string as s;from secrets import SystemRandom as SR;print(''.join(SR().choices(s.ascii_letters + s.digits + s.punctuation, k=64)));"

E vamos adicionar a chave dentro do secret key.

Debug, em desenvolvimento é true, mas em servidor não é.

O allowed hosts, pode colocar separado por vírgula.
No caso seria os hosts que pode acessar o site, por enquanto, apenas os localhosts.

Após terminar as outras configurações, a primeira coisa que vamos fazer é ir em settings.py
e usar o seguinte;

DEBUG = bool(int(os.getenv('DEBUG',0)))


Ele busca variáveis de ambiente que estamos criando, como debug, allowedhosts, e etc.
Porém, ele sempre irá retornar uma str, então para que não tenha uma variável de ambiente,
o debug irá ser falso, no caso 0.
O int faz a conversão para 1, que faz com que seja True.

Vamos usar o seguinte comando para allowed hosts;

ALLOWED_HOSTS = [
    h.strip() for h in os.getenv('ALLOWED_HOSTS','').split(',') if h.strip()
]

Primeira coisa iremos fazer os.getenv('ALLOWED_HOSTS', ''), logo, ou ele pega um
allowed host, ou pega nada. Após pegar isso, será usado um "split(,)" criando um split
na vírgula, e os valores será separados por vírgula. E para evitar que tenha
algum espaço, será pegado o h de host, e por isso está fazendo um h.strip(),
se o h.strip() tenha algum valor. SE não tiver, nada será adicionado.

Já a secret key, só usar 
os.getenv('SECRET_KEY', 'change-me')

Agora dentro do data base, vamos fazer o seguinte;

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'change-me'),
        'NAME': os.getenv('POSTGRES_DB', 'change-me'),
        'USER': os.getenv('POSTGRES_USER', 'change-me'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'change-me'),
        'HOST': os.getenv('POSTGRES_HOST', 'change-me'),
        'PORT': os.getenv('POSTGRES_PORT', 'change-me'),
    }
}

Mas, agora não será possível subir o servidor com "manage.py runserver".

Outra coisa, vamos configurar;
LANGUAGE_CODE = "pt-br"
TIME_ZONE = 'America/Sao_Paulo'

O static, estará na raiz do projeto dentro de um arquivo, sem ser do djangoapp, 
que irá se chamar DATA_WEB, então iremos criar um DATA_DIR.

BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = BASE_DIR.parent / 'data' / 'web'

Assim, os arquivos irão estar em;

data/web/static
data/web/media

Agora, vamos configurar o STATIC_ROOT, e o MEDIA_ROOT.



STATIC;

STATIC_URL = '/static/'
STATIC_ROOT = DATA_DIR / 'static'

MEDIA;

MEDIA_URL = '/media/'
MEDIA_ROOT = DATA_DIR / 'media'

Agora dentro do project/urls.py
vamos importar duas coisas;

from django.conf import settings <-- Settings do nosso django
from django.conf.urls.static import static

Agora, iremos checar se tiver debug como true, se tiver;

if settings.DEBUG:
    urlpatterns += static(
        settings.MEDIA_URL,
        document_root=settings.MEDIA_ROOT
    )

Usamos isso para conseguir ver arquivos de media enviados pelo usuário enquanto tivermos
em desenvolvimento.

